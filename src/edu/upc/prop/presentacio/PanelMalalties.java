package edu.upc.prop.presentacio;

import java.awt.event.KeyEvent;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;

public class PanelMalalties extends javax.swing.JPanel {

    private ControladorPresentacioMalalties controladorMalalties;
    private ControladorPresentacioSequencies controladorSequencies;
    private ControladorPresentacioSimptomes controladorSimptomes;
    private ControladorPresentacioPacients controladorPacients;
    private PanelMalaltiaConsulta panelConsulta;
    private PanelMalaltiaDades panelDades;
    private DefaultListModel llistaMalalties;
    private boolean modificant;
    private int indexActual;

    public PanelMalalties(ControladorPresentacioMalalties controladorMalalties, ControladorPresentacioSequencies controladorSequencies,
            ControladorPresentacioSimptomes controladorSimptomes, ControladorPresentacioPacients controladorPacients) {
        this.controladorMalalties = controladorMalalties;
        this.controladorSimptomes = controladorSimptomes;
        this.controladorSequencies = controladorSequencies;
        this.controladorPacients = controladorPacients;
        this.controladorMalalties.setPanelMalalties(this);

        llistaMalalties = new DefaultListModel();

        initComponents();

        jListMalalties.setModel(llistaMalalties);

        modificant = false;
        indexActual = -1;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jListMalalties = new javax.swing.JList();
        jPanel2 = new javax.swing.JPanel();
        jSeparator1 = new javax.swing.JSeparator();

        jListMalalties.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jListMalalties.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jListMalaltiesMouseClicked(evt);
            }
        });
        jListMalalties.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jListMalaltiesKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(jListMalalties);

        jPanel2.setLayout(new javax.swing.BoxLayout(jPanel2, javax.swing.BoxLayout.LINE_AXIS));

        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 8, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, 535, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 298, Short.MAX_VALUE)
                    .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jListMalaltiesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jListMalaltiesMouseClicked
        canviaMalaltia();
    }//GEN-LAST:event_jListMalaltiesMouseClicked

    private void jListMalaltiesKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jListMalaltiesKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_UP || evt.getKeyCode() == KeyEvent.VK_DOWN) {
            canviaMalaltia();
        }
    }//GEN-LAST:event_jListMalaltiesKeyPressed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList jListMalalties;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    // End of variables declaration//GEN-END:variables

    public boolean novaMalaltia() {
        if (modificant) {
            String msg = "Si crees una nova Malaltia sense guardar, es descartaran els canvis actuals. Vols continuar?";
            String title = "No has guardat els canvis!";
            int optionType = JOptionPane.OK_CANCEL_OPTION;
            int msgType = JOptionPane.QUESTION_MESSAGE;
            int opcio = JOptionPane.showConfirmDialog(this, msg, title, optionType, msgType);
            if (opcio == JOptionPane.CANCEL_OPTION) {
                return false;
            }
        }

        jPanel2.removeAll();
        jListMalalties.clearSelection();
        indexActual = -1;
        panelDades = new PanelMalaltiaDades(controladorMalalties, controladorSequencies,
                controladorSimptomes, controladorPacients, true);
        jPanel2.add(panelDades);

        touch();
        return true;
    }

    public boolean modificarMalaltia() {
        jPanel2.removeAll();
        int index = jListMalalties.getSelectedIndex();
        if (index != -1) {
            String malaltia = (String) jListMalalties.getModel().getElementAt(index);
            panelDades = new PanelMalaltiaDades(controladorMalalties, controladorSequencies,
                    controladorSimptomes, controladorPacients, malaltia, false);
            jPanel2.add(panelDades);
            indexActual = index;
            touch();
            return true;
        } else {
            String msg = "Ha de seleccionar una malaltia";
            String title = "Modificaci√≥ malaltia";
            modificant = false;
            JOptionPane.showMessageDialog(this, msg, title, JOptionPane.ERROR_MESSAGE);
            return false;
        }
    }

    public boolean esborrarMalaltia() {
        int index = jListMalalties.getSelectedIndex();
        String title = "Esborrar malaltia";
        String msg;

        if (index != -1) {
            msg = "Segur que vols esborrar la malaltia seleccionada?";
            int option = JOptionPane.showConfirmDialog(this, msg, title, JOptionPane.YES_NO_OPTION);

            if (option == JOptionPane.YES_OPTION) {
                controladorMalalties.esborrarMalaltia((String) jListMalalties.getModel().getElementAt(index));

                llistaMalalties.removeElementAt(index);

                jPanel2.removeAll();
                modificant = false;

                jListMalalties.clearSelection();
                indexActual = -1;
                
                touch();
                return true;
            }
        } else {
            msg = "Has de seleccionar una malaltia";
            JOptionPane.showMessageDialog(this, msg, title, JOptionPane.ERROR_MESSAGE);
        }
        return false;
    }

    public boolean seleccioBuida() {
        return jListMalalties.isSelectionEmpty();
    }

    public void redibuixar(String malaltia) {
        llistaMalalties.addElement(malaltia);
    }

    public void seleccionaMalaltia(String malaltia) {
        jPanel2.removeAll();
        int index = ((DefaultListModel) jListMalalties.getModel()).indexOf(malaltia);
        jListMalalties.setSelectedIndex(index);

        panelConsulta = new PanelMalaltiaConsulta(malaltia, controladorMalalties);
        jPanel2.add(panelConsulta);
        indexActual = index;
        modificant = false;
        controladorMalalties.enableButtonsMainForm();

        touch();
    }

    public void cancelar() {
        jPanel2.removeAll();

        int index = jListMalalties.getSelectedIndex();
        if (index != -1) {
            String malaltia = (String) jListMalalties.getModel().getElementAt(index);
            panelConsulta = new PanelMalaltiaConsulta(malaltia, controladorMalalties);
            jPanel2.add(panelConsulta);

            controladorMalalties.enableButtonsMainForm();

        }
        modificant = false;
        indexActual = index;
        touch();
    }

    private void touch() {
        jPanel2.revalidate();
        jPanel2.repaint();
    }

    private void canviaMalaltia() {
        int index = jListMalalties.getSelectedIndex();
        if (index != -1) {
            if (modificant && index != indexActual) {
                String msg = "Si consultes una altra Malaltia sense guardar, es descartaran els canvis actuals. Vols continuar?";
                String title = "No has guardat els canvis!";
                int optionType = JOptionPane.OK_CANCEL_OPTION;
                int msgType = JOptionPane.QUESTION_MESSAGE;
                int opcio = JOptionPane.showConfirmDialog(this, msg, title, optionType, msgType);
                if (opcio == JOptionPane.CANCEL_OPTION) {
                    if (indexActual == -1) {
                        jListMalalties.clearSelection();
                    } else {
                        jListMalalties.setSelectedIndex(indexActual);
                    }
                    return;
                }
            }
            if (!(modificant && index == indexActual)) {
                jPanel2.removeAll();
                String malaltia = (String) jListMalalties.getModel().getElementAt(index);
                panelConsulta = new PanelMalaltiaConsulta(malaltia, controladorMalalties);
                jPanel2.add(panelConsulta);
                modificant = false;
                controladorMalalties.enableButtonsMainForm();
                indexActual = index;
            }
            touch();
        }
    }

    public void setModificant() {
        modificant = true;
    }

    public void refresh() {
        llistaMalalties.clear();
        for (String malaltia : controladorMalalties.getNomMalalties()) {
            llistaMalalties.addElement(malaltia);
        }
    }
}
